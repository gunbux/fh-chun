import { TwoSlashReturn, twoslasher, TwoSlashOptions } from '@typescript/twoslash';
import { CodeToHastOptions, ShikijiTransformerContext, ShikijiTransformer } from 'shikiji-core';
import { ElementContent, Element, Text } from 'hast';

declare module 'shikiji-core' {
    interface ShikijiTransformerContextMeta {
        twoslash?: TwoSlashReturn;
    }
}
interface TransformerTwoSlashOptions {
    /**
     * Languages to apply this transformer to
     */
    langs?: string[];
    /**
     * Requires `twoslash` to be presented in the code block meta to apply this transformer
     *
     * @default false
     */
    explicitTrigger?: boolean;
    /**
     * Mapping from language alias to language name
     */
    langAlias?: Record<string, string>;
    /**
     * Custom filter function to apply this transformer to
     * When specified, `langs` and `explicitTrigger` will be ignored
     */
    filter?: (lang: string, code: string, options: CodeToHastOptions) => boolean;
    /**
     * Custom instance of twoslasher function
     */
    twoslasher?: typeof twoslasher;
    /**
     * Options to pass to twoslash
     */
    twoslashOptions?: TwoSlashOptions;
    /**
     * Custom renderers to decide how each info should be rendered
     */
    renderer?: TwoSlashRenderers;
    /**
     * Strictly throw when there is an error
     * @default true
     */
    throws?: boolean;
}
interface TwoSlashRenderers {
    lineError?(this: ShikijiTransformerContext, error: TwoSlashReturn['errors'][0]): ElementContent[];
    lineCustomTag?(this: ShikijiTransformerContext, tag: TwoSlashReturn['tags'][0]): ElementContent[];
    lineQuery?(this: ShikijiTransformerContext, query: TwoSlashReturn['queries'][0], targetNode?: Element | Text): ElementContent[];
    lineCompletions?(this: ShikijiTransformerContext, query: TwoSlashReturn['queries'][0]): ElementContent[];
    nodeError?(this: ShikijiTransformerContext, error: TwoSlashReturn['errors'][0], node: Element | Text): Partial<ElementContent>;
    nodeStaticInfo(this: ShikijiTransformerContext, info: TwoSlashReturn['staticQuickInfos'][0], node: Element | Text): Partial<ElementContent>;
    nodeQuery?(this: ShikijiTransformerContext, query: TwoSlashReturn['queries'][0], node: Element | Text): Partial<ElementContent>;
    nodeCompletions?(this: ShikijiTransformerContext, query: TwoSlashReturn['queries'][0], node: Element | Text): Partial<ElementContent>;
}

/**
 * The default renderer aligning with the original `shiki-twoslash` output.
 */
declare function rendererClassic(): TwoSlashRenderers;

type CompletionItem = NonNullable<TwoSlashReturn['queries'][0]['completions']>[0];
declare const defaultCompletionIcons: Record<CompletionItem['kind'], Element | undefined>;
declare const defaultCustomTagIcons: Record<string, Element | undefined>;

interface RendererRichOptions {
    /**
     * Render JSDoc comments in hover popup.
     *
     * @default true
     */
    jsdoc?: boolean;
    /**
     * Custom icons for completion items.
     * A map from completion item kind to a HAST node.
     *
     * If `false`, no icons will be rendered.
     * @default defaultCompletionIcons
     */
    completionIcons?: Partial<Record<CompletionItem['kind'], ElementContent>> | false;
    /**
     * Custom icons for custom tags lines.
     * A map from tag name to a HAST node.
     *
     * If `false`, no icons will be rendered.
     * @default defaultCustomTagIcons
     */
    customTagIcons?: Partial<Record<string, ElementContent>> | false;
    /**
     * Custom formatter for the type info text.
     * Note that it might not be valid TypeScript syntax.
     *
     * @default defaultHoverInfoProcessor
     */
    processHoverInfo?: (info: string) => string;
    /**
     * Custom formatter for the docs text (can be markdown).
     *
     * @default undefined
     */
    processHoverDocs?: (docs: string) => string;
    /**
     * Classes added to injected elements
     */
    classExtra?: string;
    /**
     * Language for syntax highlight.
     * @default the language of the code block
     */
    lang?: string;
    /**
     * @deprecated Use `processHoverInfo` instead.
     */
    formatInfo?(info: string): string;
}
/**
 * An alternative renderer that providers better prefixed class names,
 * with syntax highlight for the info text.
 */
declare function rendererRich(options?: RendererRichOptions): TwoSlashRenderers;
/**
 * The default hover info processor, which will do some basic cleanup
 */
declare function defaultHoverInfoProcessor(type: string): string;

/**
 * This file is the core of the shikiji-twoslash package,
 * Decoupled from twoslash's implementation and allowing to introduce custom implementation or cache system.
 */

declare function defaultTwoSlashOptions(): {
    customTags: string[];
    defaultCompilerOptions: {
        module: number;
        target: number;
    };
};
declare function createTransformerFactory(defaultTwoslasher: typeof twoslasher): (options?: TransformerTwoSlashOptions) => ShikijiTransformer;

export { type CompletionItem, type RendererRichOptions, type TransformerTwoSlashOptions, type TwoSlashRenderers, createTransformerFactory, defaultCompletionIcons, defaultCustomTagIcons, defaultHoverInfoProcessor, defaultTwoSlashOptions, rendererClassic, rendererRich };
