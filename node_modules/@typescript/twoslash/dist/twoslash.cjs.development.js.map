{"version":3,"file":"twoslash.cjs.development.js","sources":["../src/utils.ts","../src/validation.ts","../src/index.ts"],"sourcesContent":["import { TwoslashError } from \"./\"\n\nexport function escapeHtml(text: string) {\n  return text.replace(/</g, \"&lt;\")\n}\n\nexport function strrep(text: string, count: number) {\n  let s = \"\"\n  for (let i = 0; i < count; i++) {\n    s += text\n  }\n  return s\n}\n\nexport function textToAnchorName(text: string) {\n  return text\n    .toLowerCase()\n    .replace(/ /g, \"-\")\n    .replace(/`|#|\\//g, \"\")\n}\n\nexport function fileNameToUrlName(s: string) {\n  return s.replace(/ /g, \"-\").replace(/#/g, \"sharp\").toLowerCase()\n}\n\nexport function parsePrimitive(value: string, type: string): any {\n  switch (type) {\n    case \"number\":\n      return +value\n    case \"string\":\n      return value\n    case \"boolean\":\n      return value.toLowerCase() === \"true\" || value.length === 0\n  }\n\n  throw new TwoslashError(\n    `Unknown primitive value in compiler flag`,\n    `The only recognized primitives are number, string and boolean. Got ${type} with ${value}.`,\n    `This is likely a typo.`\n  )\n}\n\nexport function cleanMarkdownEscaped(code: string) {\n  code = code.replace(/¨D/g, \"$\")\n  code = code.replace(/¨T/g, \"~\")\n  return code\n}\n\nexport function typesToExtension(types: string) {\n  const map: Record<string, string> = {\n    js: \"js\",\n    javascript: \"js\",\n    ts: \"ts\",\n    typescript: \"ts\",\n    tsx: \"tsx\",\n    jsx: \"jsx\",\n    json: \"json\",\n    jsn: \"json\",\n  }\n\n  if (map[types]) return map[types]\n\n  throw new TwoslashError(\n    `Unknown TypeScript extension given to Twoslash`,\n    `Received ${types} but Twoslash only accepts: ${Object.keys(map)} `,\n    ``\n  )\n}\n\nexport function getIdentifierTextSpans(ts: typeof import(\"typescript\"), sourceFile: import(\"typescript\").SourceFile) {\n  const textSpans: { span: import(\"typescript\").TextSpan; text: string }[] = []\n  checkChildren(sourceFile)\n  return textSpans\n\n  function checkChildren(node: import(\"typescript\").Node) {\n    ts.forEachChild(node, child => {\n      if (ts.isIdentifier(child)) {\n        const start = child.getStart(sourceFile, false)\n        textSpans.push({ span: ts.createTextSpan(start, child.end - start), text: child.getText(sourceFile) })\n      }\n      checkChildren(child)\n    })\n  }\n}\n\nexport function stringAroundIndex(string: string, index: number) {\n  const arr = [\n    string[index - 3],\n    string[index - 2],\n    string[index - 1],\n    \">\",\n    string[index],\n    \"<\",\n    string[index + 1],\n    string[index + 2],\n    string[index + 3],\n  ]\n  return arr.filter(Boolean).join(\"\")\n}\n\n/** Came from https://ourcodeworld.com/articles/read/223/how-to-retrieve-the-closest-word-in-a-string-with-a-given-index-in-javascript */\nexport function getClosestWord(str: string, pos: number) {\n  // Make copies\n  str = String(str)\n  pos = Number(pos) >>> 0\n\n  // Search for the word's beginning and end.\n  var left = str.slice(0, pos + 1).search(/\\S+$/),\n    right = str.slice(pos).search(/\\s/)\n\n  // The last word in the string is a special case.\n  if (right < 0) {\n    return {\n      word: str.slice(left),\n      startPos: left,\n    }\n  }\n  // Return the word, using the located bounds to extract it from the string.\n  return {\n    word: str.slice(left, right + pos),\n    startPos: left,\n  }\n}\n","import { TwoslashError } from \"./\"\n\n/** To ensure that errors are matched up right */\nexport function validateCodeForErrors(\n  relevantErrors: import(\"typescript\").Diagnostic[],\n  handbookOptions: { errors: number[] },\n  extension: string,\n  originalCode: string,\n  vfsRoot: string\n) {\n  const inErrsButNotFoundInTheHeader = relevantErrors.filter(e => !handbookOptions.errors.includes(e.code))\n  const errorsFound = Array.from(new Set(inErrsButNotFoundInTheHeader.map(e => e.code))).join(\" \")\n\n  if (inErrsButNotFoundInTheHeader.length) {\n    const errorsToShow = new Set(relevantErrors.map(e => e.code))\n    const codeToAdd = `// @errors: ${Array.from(errorsToShow).join(\" \")}`\n\n    const missing = handbookOptions.errors.length\n      ? `\\nThe existing annotation specified ${handbookOptions.errors.join(\" \")}`\n      : \"\\nExpected: \" + codeToAdd\n\n    // These get filled by below\n    const filesToErrors: Record<string, import(\"typescript\").Diagnostic[]> = {}\n    const noFiles: import(\"typescript\").Diagnostic[] = []\n\n    inErrsButNotFoundInTheHeader.forEach(d => {\n      const fileRef = d.file?.fileName && d.file.fileName.replace(vfsRoot, \"\")\n      if (!fileRef) noFiles.push(d)\n      else {\n        const existing = filesToErrors[fileRef]\n        if (existing) existing.push(d)\n        else filesToErrors[fileRef] = [d]\n      }\n    })\n\n    const showDiagnostics = (title: string, diags: import(\"typescript\").Diagnostic[]) => {\n      return (\n        `${title}\\n  ` +\n        diags\n          .map(e => {\n            const msg = typeof e.messageText === \"string\" ? e.messageText : e.messageText.messageText\n            return `[${e.code}] ${e.start} - ${msg}`\n          })\n          .join(\"\\n  \")\n      )\n    }\n\n    const innerDiags: string[] = []\n    if (noFiles.length) {\n      innerDiags.push(showDiagnostics(\"Ambient Errors\", noFiles))\n    }\n    Object.keys(filesToErrors).forEach(filepath => {\n      innerDiags.push(showDiagnostics(filepath, filesToErrors[filepath]))\n    })\n\n    const allMessages = innerDiags.join(\"\\n\\n\")\n\n    const newErr = new TwoslashError(\n      `Errors were thrown in the sample, but not included in an errors tag`,\n      `These errors were not marked as being expected: ${errorsFound}. ${missing}`,\n      `Compiler Errors:\\n\\n${allMessages}`\n    )\n\n    newErr.code = `## Code\\n\\n'''${extension}\\n${originalCode}\\n'''`\n    throw newErr\n  }\n}\n\n/** Mainly to warn myself, I've lost a good few minutes to this before */\nexport function validateInput(code: string) {\n  if (code.includes(\"// @errors \")) {\n    throw new TwoslashError(\n      `You have '// @errors ' (with a space)`,\n      `You want '// @errors: ' (with a colon)`,\n      `This is a pretty common typo`\n    )\n  }\n\n  if (code.includes(\"// @filename \")) {\n    throw new TwoslashError(\n      `You have '// @filename ' (with a space)`,\n      `You want '// @filename: ' (with a colon)`,\n      `This is a pretty common typo`\n    )\n  }\n}\n","let hasLocalStorage = false\ntry {\n  hasLocalStorage = typeof localStorage !== `undefined`\n} catch (error) { }\nconst hasProcess = typeof process !== `undefined`\nconst shouldDebug = (hasLocalStorage && localStorage.getItem(\"DEBUG\")) || (hasProcess && process.env.DEBUG)\n\ntype LZ = typeof import(\"lz-string\")\ntype TS = typeof import(\"typescript\")\ntype CompilerOptions = import(\"typescript\").CompilerOptions\ntype CustomTransformers = import(\"typescript\").CustomTransformers\n\nimport { parsePrimitive, cleanMarkdownEscaped, typesToExtension, getIdentifierTextSpans, getClosestWord } from \"./utils\"\nimport { validateInput, validateCodeForErrors } from \"./validation\"\n\nimport { createSystem, createVirtualTypeScriptEnvironment, createFSBackedSystem } from \"@typescript/vfs\"\n\nconst log = shouldDebug ? console.log : (_message?: any, ..._optionalParams: any[]) => \"\"\n\n// Hacking in some internal stuff\ndeclare module \"typescript\" {\n  type Option = {\n    name: string\n    type: \"list\" | \"boolean\" | \"number\" | \"string\" | Map<string, any>\n    element?: Option\n  }\n\n  const optionDeclarations: Array<Option>\n}\n\ntype QueryPosition = {\n  kind: \"query\" | \"completion\"\n  offset: number\n  text: string | undefined\n  docs: string | undefined\n  line: number\n}\n\ntype PartialQueryResults = {\n  kind: \"query\"\n  text: string\n  docs: string | undefined\n  line: number\n  offset: number\n  file: string\n}\n\ntype PartialCompletionResults = {\n  kind: \"completions\"\n  completions: import(\"typescript\").CompletionEntry[]\n  completionPrefix: string\n\n  line: number\n  offset: number\n  file: string\n}\n\ntype HighlightPosition = TwoSlashReturn[\"highlights\"][number]\n\nexport class TwoslashError extends Error {\n  public title: string\n  public description: string\n  public recommendation: string\n  public code: string | undefined\n\n  constructor(title: string, description: string, recommendation: string, code?: string | undefined) {\n    let message = `\n## ${title}\n\n${description}\n`\n    if (recommendation) {\n      message += `\\n${recommendation}`\n    }\n\n    if (code) {\n      message += `\\n${code}`\n    }\n\n    super(message)\n    this.title = title\n    this.description = description\n    this.recommendation = recommendation\n    this.code = code\n  }\n}\n\nfunction filterHighlightLines(codeLines: string[]): { highlights: HighlightPosition[]; queries: QueryPosition[] } {\n  const highlights: HighlightPosition[] = []\n  const queries: QueryPosition[] = []\n\n  let nextContentOffset = 0\n  let contentOffset = 0\n  let removedLines = 0\n\n  for (let i = 0; i < codeLines.length; i++) {\n    const line = codeLines[i]\n    const moveForward = () => {\n      contentOffset = nextContentOffset\n      nextContentOffset += line.length + 1\n    }\n\n    const stripLine = (logDesc: string) => {\n      log(`Removing line ${i} for ${logDesc}`)\n\n      removedLines++\n      codeLines.splice(i, 1)\n      i--\n    }\n\n    // We only need to run regexes over lines with comments\n    if (!line.includes(\"//\")) {\n      moveForward()\n    } else {\n      const highlightMatch = /^\\s*\\/\\/\\s*\\^+( .+)?$/.exec(line)\n      const queryMatch = /^\\s*\\/\\/\\s*\\^\\?\\s*$/.exec(line)\n      // https://regex101.com/r/2yDsRk/1\n      const removePrettierIgnoreMatch = /^\\s*\\/\\/ prettier-ignore$/.exec(line)\n      const completionsQuery = /^\\s*\\/\\/\\s*\\^\\|$/.exec(line)\n\n      if (queryMatch !== null) {\n        const start = line.indexOf(\"^\")\n        queries.push({ kind: \"query\", offset: start, text: undefined, docs: undefined, line: i + removedLines - 1 })\n        stripLine(\"having a query\")\n      } else if (highlightMatch !== null) {\n        const start = line.indexOf(\"^\")\n        const length = line.lastIndexOf(\"^\") - start + 1\n        const description = highlightMatch[1] ? highlightMatch[1].trim() : \"\"\n        highlights.push({\n          kind: \"highlight\",\n          offset: start + contentOffset,\n          length,\n          text: description,\n          line: i + removedLines - 1,\n          start,\n        })\n\n        stripLine(\"having a highlight\")\n      } else if (removePrettierIgnoreMatch !== null) {\n        stripLine(\"being a prettier ignore\")\n      } else if (completionsQuery !== null) {\n        const start = line.indexOf(\"^\")\n        // prettier-ignore\n        queries.push({ kind: \"completion\", offset: start, text: undefined, docs: undefined, line: i + removedLines - 1 })\n        stripLine(\"having a completion query\")\n      } else {\n        moveForward()\n      }\n    }\n  }\n  return { highlights, queries }\n}\n\nfunction getOptionValueFromMap(name: string, key: string, optMap: Map<string, string>) {\n  const result = optMap.get(key.toLowerCase())\n  log(`Get ${name} mapped option: ${key} => ${result}`)\n  if (result === undefined) {\n    const keys = Array.from(optMap.keys() as any)\n\n    throw new TwoslashError(\n      `Invalid inline compiler value`,\n      `Got ${key} for ${name} but it is not a supported value by the TS compiler.`,\n      `Allowed values: ${keys.join(\",\")}`\n    )\n  }\n  return result\n}\n\nfunction setOption(name: string, value: string, opts: CompilerOptions, ts: TS) {\n  log(`Setting ${name} to ${value}`)\n\n  for (const opt of ts.optionDeclarations) {\n    if (opt.name.toLowerCase() === name.toLowerCase()) {\n      switch (opt.type) {\n        case \"number\":\n        case \"string\":\n        case \"boolean\":\n          opts[opt.name] = parsePrimitive(value, opt.type)\n          break\n\n        case \"list\":\n          const elementType = opt.element!.type\n          const strings = value.split(\",\")\n          if (typeof elementType === \"string\") {\n            opts[opt.name] = strings.map(v => parsePrimitive(v, elementType))\n          } else {\n            opts[opt.name] = strings.map(v => getOptionValueFromMap(opt.name, v, elementType as Map<string, string>))\n          }\n          break\n\n        default:\n          // It's a map!\n          const optMap = opt.type as Map<string, string>\n          opts[opt.name] = getOptionValueFromMap(opt.name, value, optMap)\n          break\n      }\n      return\n    }\n  }\n\n  throw new TwoslashError(\n    `Invalid inline compiler flag`,\n    `There isn't a TypeScript compiler flag called '${name}'.`,\n    `This is likely a typo, you can check all the compiler flags in the TSConfig reference, or check the additional Twoslash flags in the npm page for @typescript/twoslash.`\n  )\n}\n\nconst booleanConfigRegexp = /^\\/\\/\\s?@(\\w+)$/\n\n// https://regex101.com/r/8B2Wwh/1\nconst valuedConfigRegexp = /^\\/\\/\\s?@(\\w+):\\s?(.+)$/\n\nfunction filterCompilerOptions(codeLines: string[], defaultCompilerOptions: CompilerOptions, ts: TS) {\n  const options = { ...defaultCompilerOptions }\n  for (let i = 0; i < codeLines.length;) {\n    let match\n    if ((match = booleanConfigRegexp.exec(codeLines[i]))) {\n      options[match[1]] = true\n      setOption(match[1], \"true\", options, ts)\n    } else if ((match = valuedConfigRegexp.exec(codeLines[i]))) {\n      // Skip a filename tag, which should propagate through this stage\n      if (match[1] === \"filename\") {\n        i++\n        continue\n      }\n      setOption(match[1], match[2], options, ts)\n    } else {\n      i++\n      continue\n    }\n    codeLines.splice(i, 1)\n  }\n  return options\n}\n\nfunction filterCustomTags(codeLines: string[], customTags: string[]) {\n  const tags: TwoSlashReturn[\"tags\"] = []\n\n  for (let i = 0; i < codeLines.length;) {\n    let match\n    if ((match = valuedConfigRegexp.exec(codeLines[i]))) {\n      if (customTags.includes(match[1])) {\n        tags.push({ name: match[1], line: i, annotation: codeLines[i].split(\"@\" + match[1] + \": \")[1] })\n        codeLines.splice(i, 1)\n      }\n    }\n    i++\n  }\n  return tags\n}\n\n/** Available inline flags which are not compiler flags */\nexport interface ExampleOptions {\n  /** Lets the sample suppress all error diagnostics */\n  noErrors: boolean\n  /** An array of TS error codes, which you write as space separated - this is so the tool can know about unexpected errors */\n  errors: number[]\n  /** Shows the JS equivalent of the TypeScript code instead */\n  showEmit: boolean\n  /**\n   * Must be used with showEmit, lets you choose the file to present instead of the source - defaults to index.js which\n   * means when you just use `showEmit` above it shows the transpiled JS.\n   */\n  showEmittedFile: string\n\n  /** Whether to disable the pre-cache of LSP calls for interesting identifiers, defaults to false */\n  noStaticSemanticInfo: boolean\n  /** Declare that the TypeScript program should edit the fsMap which is passed in, this is only useful for tool-makers, defaults to false */\n  emit: boolean\n  /** Declare that you don't need to validate that errors have corresponding annotations, defaults to false */\n  noErrorValidation: boolean\n}\n\n// Keys in this object are used to filter out handbook options\n// before compiler options are set.\n\nconst defaultHandbookOptions: Partial<ExampleOptions> = {\n  errors: [],\n  noErrors: false,\n  showEmit: false,\n  showEmittedFile: undefined,\n  noStaticSemanticInfo: false,\n  emit: false,\n  noErrorValidation: false,\n}\n\nfunction filterHandbookOptions(codeLines: string[]): ExampleOptions {\n  const options: any = { ...defaultHandbookOptions }\n  for (let i = 0; i < codeLines.length; i++) {\n    let match\n    if ((match = booleanConfigRegexp.exec(codeLines[i]))) {\n      if (match[1] in options) {\n        options[match[1]] = true\n        log(`Setting options.${match[1]} to true`)\n        codeLines.splice(i, 1)\n        i--\n      }\n    } else if ((match = valuedConfigRegexp.exec(codeLines[i]))) {\n      if (match[1] in options) {\n        options[match[1]] = match[2]\n        log(`Setting options.${match[1]} to ${match[2]}`)\n        codeLines.splice(i, 1)\n        i--\n      }\n    }\n  }\n\n  // Edge case the errors object to turn it into a string array\n  if (\"errors\" in options && typeof options.errors === \"string\") {\n    options.errors = options.errors.split(\" \").map(Number)\n    log(\"Setting options.error to \", options.errors)\n  }\n\n  return options\n}\n\nexport interface TwoSlashReturn {\n  /** The output code, could be TypeScript, but could also be a JS/JSON/d.ts */\n  code: string\n\n  /** The new extension type for the code, potentially changed if they've requested emitted results */\n  extension: string\n\n  /** Requests to highlight a particular part of the code */\n  highlights: {\n    kind: \"highlight\"\n    /** The index of the text in the file */\n    start: number\n    /** What line is the highlighted identifier on? */\n    line: number\n    /** At what index in the line does the caret represent  */\n    offset: number\n    /** The text of the token which is highlighted */\n    text?: string\n    /** The length of the token */\n    length: number\n  }[]\n\n  /** An array of LSP responses identifiers in the sample  */\n  staticQuickInfos: {\n    /** The string content of the node this represents (mainly for debugging) */\n    targetString: string\n    /** The base LSP response (the type) */\n    text: string\n    /** Attached JSDoc info */\n    docs: string | undefined\n    /** The index of the text in the file */\n    start: number\n    /** how long the identifier */\n    length: number\n    /** line number where this is found */\n    line: number\n    /** The character on the line */\n    character: number\n  }[]\n\n  /** Requests to use the LSP to get info for a particular symbol in the source */\n  queries: {\n    kind: \"query\" | \"completions\"\n    /** What line is the highlighted identifier on? */\n    line: number\n    /** At what index in the line does the caret represent  */\n    offset: number\n    /** The text of the token which is highlighted */\n    text?: string\n    /** Any attached JSDocs */\n    docs?: string | undefined\n    /** The token start which the query indicates  */\n    start: number\n    /** The length of the token */\n    length: number\n    /** Results for completions at a particular point */\n    completions?: import(\"typescript\").CompletionEntry[]\n    /* Completion prefix e.g. the letters before the cursor in the word so you can filter */\n    completionsPrefix?: string\n  }[]\n\n  /** The extracted twoslash commands for any custom tags passed in via customTags */\n  tags: {\n    /** What was the name of the tag */\n    name: string\n    /** Where was it located in the original source file */\n    line: number\n    /** What was the text after the `// @tag: ` string  (optional because you could do // @tag on it's own line without the ':') */\n    annotation?: string\n  }[]\n\n  /** Diagnostic error messages which came up when creating the program */\n  errors: {\n    renderedMessage: string\n    id: string\n    category: 0 | 1 | 2 | 3\n    code: number\n    start: number | undefined\n    length: number | undefined\n    line: number | undefined\n    character: number | undefined\n  }[]\n\n  /** The URL for this sample in the playground */\n  playgroundURL: string\n}\n\nexport interface TwoSlashOptions {\n  /** Allows setting any of the handbook options from outside the function, useful if you don't want LSP identifiers */\n  defaultOptions?: Partial<ExampleOptions>\n\n  /** Allows setting any of the compiler options from outside the function */\n  defaultCompilerOptions?: CompilerOptions\n\n  /** Allows applying custom transformers to the emit result, only useful with the showEmit output */\n  customTransformers?: CustomTransformers\n\n  /** An optional copy of the TypeScript import, if missing it will be require'd. */\n  tsModule?: TS\n\n  /** Absolute path to the directory to look up built-in TypeScript .d.ts files. */\n  tsLibDirectory?: string\n\n  /** An optional copy of the lz-string import, if missing it will be require'd. */\n  lzstringModule?: LZ\n\n  /**\n   * An optional Map object which is passed into @typescript/vfs - if you are using twoslash on the\n   * web then you'll need this to set up your lib *.d.ts files. If missing, it will use your fs.\n   */\n  fsMap?: Map<string, string>\n\n  /** The cwd for the folder which the virtual fs should be overlaid on top of when using local fs, opts to process.cwd() if not present */\n  vfsRoot?: string\n\n  /** A set of known `// @[tags]` tags to extract and not treat as a comment */\n  customTags?: string[]\n}\n\n/**\n * Runs the checker against a TypeScript/JavaScript code sample returning potentially\n * difference code, and a set of annotations around how it works.\n *\n * @param code The twoslash markup'd code\n * @param extension For example: \"ts\", \"tsx\", \"typescript\", \"javascript\" or \"js\".\n * @param options Additional options for twoslash\n */\nexport function twoslasher(code: string, extension: string, options: TwoSlashOptions = {}): TwoSlashReturn {\n  const ts: TS = options.tsModule ?? require(\"typescript\")\n  const lzstring: LZ = options.lzstringModule ?? require(\"lz-string\")\n\n  const originalCode = code\n  const safeExtension = typesToExtension(extension)\n  const defaultFileName = \"index.\" + safeExtension\n\n  log(`\\n\\nLooking at code: \\n\\`\\`\\`${safeExtension}\\n${code}\\n\\`\\`\\`\\n`)\n\n  const defaultCompilerOptions = {\n    strict: true,\n    target: ts.ScriptTarget.ES2016,\n    allowJs: true,\n    ...(options.defaultCompilerOptions ?? {}),\n  }\n\n  validateInput(code)\n\n  code = cleanMarkdownEscaped(code)\n\n  // NOTE: codeLines is mutated by the below functions:\n  const codeLines = code.split(/\\r\\n?|\\n/g)\n\n  let tags: TwoSlashReturn[\"tags\"] = options.customTags ? filterCustomTags(codeLines, options.customTags) : []\n  const handbookOptions = { ...filterHandbookOptions(codeLines), ...options.defaultOptions }\n  const compilerOptions = filterCompilerOptions(codeLines, defaultCompilerOptions, ts)\n\n  // Handle special casing the lookup for when using jsx preserve which creates .jsx files\n  if (!handbookOptions.showEmittedFile) {\n    handbookOptions.showEmittedFile =\n      compilerOptions.jsx && compilerOptions.jsx === ts.JsxEmit.Preserve ? \"index.jsx\" : \"index.js\"\n  }\n\n  const getRoot = () => {\n    const pa = \"pa\"\n    const path = require(pa + \"th\") as typeof import(\"path\")\n    const rootPath = options.vfsRoot || process.cwd()\n    return rootPath.split(path.sep).join(path.posix.sep)\n  }\n\n  // In a browser we want to DI everything, in node we can use local infra\n  const useFS = !!options.fsMap\n  const vfs = useFS && options.fsMap ? options.fsMap : new Map<string, string>()\n  const system = useFS ? createSystem(vfs) : createFSBackedSystem(vfs, getRoot(), ts, options.tsLibDirectory)\n  const fsRoot = useFS ? \"/\" : getRoot() + \"/\"\n\n  const env = createVirtualTypeScriptEnvironment(system, [], ts, compilerOptions, options.customTransformers)\n  const ls = env.languageService\n\n  code = codeLines.join(\"\\n\")\n\n  let partialQueries = [] as (PartialQueryResults | PartialCompletionResults)[]\n  let queries = [] as TwoSlashReturn[\"queries\"]\n  let highlights = [] as TwoSlashReturn[\"highlights\"]\n\n  const nameContent = splitTwoslashCodeInfoFiles(code, defaultFileName, fsRoot)\n  const sourceFiles = [\"js\", \"jsx\", \"ts\", \"tsx\"]\n\n  /** All of the referenced files in the markup */\n  const filenames = nameContent.map(nc => nc[0])\n\n  for (const file of nameContent) {\n    const [filename, codeLines] = file\n    const filetype = filename.split(\".\").pop() || \"\"\n\n    // Only run the LSP-y things on source files\n    const allowJSON = compilerOptions.resolveJsonModule && filetype === \"json\"\n    if (!sourceFiles.includes(filetype) && !allowJSON) {\n      continue\n    }\n\n    // Create the file in the vfs\n    const newFileCode = codeLines.join(\"\\n\")\n    env.createFile(filename, newFileCode)\n\n    const updates = filterHighlightLines(codeLines)\n    highlights = highlights.concat(updates.highlights)\n\n    // ------ Do the LSP lookup for the queries\n\n    const lspedQueries = updates.queries.map((q, i) => {\n      const sourceFile = env.getSourceFile(filename)!\n      const position = ts.getPositionOfLineAndCharacter(sourceFile, q.line, q.offset)\n      switch (q.kind) {\n        case \"query\": {\n          const quickInfo = ls.getQuickInfoAtPosition(filename, position)\n\n          // prettier-ignore\n          let text: string\n          let docs: string | undefined\n\n          if (quickInfo && quickInfo.displayParts) {\n            text = quickInfo.displayParts.map(dp => dp.text).join(\"\")\n            docs = quickInfo.documentation ? quickInfo.documentation.map(d => d.text).join(\"<br/>\") : undefined\n          } else {\n            throw new TwoslashError(\n              `Invalid QuickInfo query`,\n              `The request on line ${q.line} in ${filename} for quickinfo via ^? returned no from the compiler.`,\n              `This is likely that the x positioning is off.`\n            )\n          }\n\n          const queryResult: PartialQueryResults = {\n            kind: \"query\",\n            text,\n            docs,\n            line: q.line - i,\n            offset: q.offset,\n            file: filename,\n          }\n          return queryResult\n        }\n\n        case \"completion\": {\n          const completions = ls.getCompletionsAtPosition(filename, position - 1, {})\n          if (!completions && !handbookOptions.noErrorValidation) {\n            throw new TwoslashError(\n              `Invalid completion query`,\n              `The request on line ${q.line} in ${filename} for completions via ^| returned no completions from the compiler.`,\n              `This is likely that the positioning is off.`\n            )\n          }\n\n          const word = getClosestWord(sourceFile.text, position - 1)\n          const prefix = sourceFile.text.slice(word.startPos, position)\n          const lastDot = prefix.split(\".\").pop() || \"\"\n\n          const queryResult: PartialCompletionResults = {\n            kind: \"completions\",\n            completions: completions?.entries || [],\n            completionPrefix: lastDot,\n            line: q.line - i,\n            offset: q.offset,\n            file: filename,\n          }\n          return queryResult\n        }\n      }\n    })\n    partialQueries = partialQueries.concat(lspedQueries)\n\n    // Sets the file in the compiler as being without the comments\n    const newEditedFileCode = codeLines.join(\"\\n\")\n    env.updateFile(filename, newEditedFileCode)\n  }\n\n  // We need to also strip the highlights + queries from the main file which is shown to people\n  const allCodeLines = code.split(/\\r\\n?|\\n/g)\n  filterHighlightLines(allCodeLines)\n  code = allCodeLines.join(\"\\n\")\n\n  // Lets fs changes propagate back up to the fsMap\n  if (handbookOptions.emit) {\n    filenames.forEach(f => {\n      const filetype = f.split(\".\").pop() || \"\"\n      if (!sourceFiles.includes(filetype)) return\n\n      const output = ls.getEmitOutput(f)\n      output.outputFiles.forEach(output => {\n        system.writeFile(output.name, output.text)\n      })\n    })\n  }\n\n  // Code should now be safe to compile, so we're going to split it into different files\n  let errs: import(\"typescript\").Diagnostic[] = []\n  // Let because of a filter when cutting\n  let staticQuickInfos: TwoSlashReturn[\"staticQuickInfos\"] = []\n\n  // Iterate through the declared files and grab errors and LSP quickinfos\n  // const declaredFiles = Object.keys(fileMap)\n\n  filenames.forEach(file => {\n    const filetype = file.split(\".\").pop() || \"\"\n\n    // Only run the LSP-y things on source files\n    if (!sourceFiles.includes(filetype)) {\n      return\n    }\n\n    if (!handbookOptions.noErrors) {\n      errs = errs.concat(ls.getSemanticDiagnostics(file), ls.getSyntacticDiagnostics(file))\n    }\n\n    const source = env.sys.readFile(file)!\n    const sourceFile = env.getSourceFile(file)\n    if (!sourceFile) {\n      throw new TwoslashError(\n        `Could not find a  TypeScript sourcefile for '${file}' in the Twoslash vfs`,\n        `It's a little hard to provide useful advice on this error. Maybe you imported something which the compiler doesn't think is a source file?`,\n        ``\n      )\n    }\n\n    // Get all of the interesting quick info popover\n    if (!handbookOptions.showEmit) {\n      const fileContentStartIndexInModifiedFile = code.indexOf(source) == -1 ? 0 : code.indexOf(source)\n      const linesAbove = code.slice(0, fileContentStartIndexInModifiedFile).split(\"\\n\").length - 1\n\n      // Get all interesting identifiers in the file, so we can show hover info for it\n      const identifiers = handbookOptions.noStaticSemanticInfo ? [] : getIdentifierTextSpans(ts, sourceFile)\n      for (const identifier of identifiers) {\n        const span = identifier.span\n        const quickInfo = ls.getQuickInfoAtPosition(file, span.start)\n\n        if (quickInfo && quickInfo.displayParts) {\n          const text = quickInfo.displayParts.map(dp => dp.text).join(\"\")\n          const targetString = identifier.text\n          const docs = quickInfo.documentation ? quickInfo.documentation.map(d => d.text).join(\"\\n\") : undefined\n\n          // Get the position of the\n          const position = span.start + fileContentStartIndexInModifiedFile\n          // Use TypeScript to pull out line/char from the original code at the position + any previous offset\n          const burnerSourceFile = ts.createSourceFile(\"_.ts\", code, ts.ScriptTarget.ES2015)\n          const { line, character } = ts.getLineAndCharacterOfPosition(burnerSourceFile, position)\n\n          staticQuickInfos.push({ text, docs, start: position, length: span.length, line, character, targetString })\n        }\n      }\n\n      // Offset the queries for this file because they are based on the line for that one\n      // specific file, and not the global twoslash document. This has to be done here because\n      // in the above loops, the code for queries/highlights/etc hasn't been stripped yet.\n      partialQueries\n        .filter((q: any) => q.file === file)\n        .forEach(q => {\n          const pos =\n            ts.getPositionOfLineAndCharacter(sourceFile, q.line, q.offset) + fileContentStartIndexInModifiedFile\n\n          switch (q.kind) {\n            case \"query\": {\n              queries.push({\n                docs: q.docs,\n                kind: \"query\",\n                start: pos + fileContentStartIndexInModifiedFile,\n                length: q.text.length,\n                text: q.text,\n                offset: q.offset,\n                line: q.line + linesAbove + 1,\n              })\n              break\n            }\n            case \"completions\": {\n              queries.push({\n                completions: q.completions,\n                kind: \"completions\",\n                start: pos + fileContentStartIndexInModifiedFile,\n                completionsPrefix: q.completionPrefix,\n                length: 1,\n                offset: q.offset,\n                line: q.line + linesAbove + 1,\n              })\n            }\n          }\n        })\n    }\n  })\n\n  const relevantErrors = errs.filter(e => e.file && filenames.includes(e.file.fileName))\n\n  // A validator that error codes are mentioned, so we can know if something has broken in the future\n  if (!handbookOptions.noErrorValidation && relevantErrors.length) {\n    validateCodeForErrors(relevantErrors, handbookOptions, extension, originalCode, fsRoot)\n  }\n\n  let errors: TwoSlashReturn[\"errors\"] = []\n\n  // We can't pass the ts.DiagnosticResult out directly (it can't be JSON.stringified)\n  for (const err of relevantErrors) {\n    const codeWhereErrorLives = env.sys.readFile(err.file!.fileName)!\n    const lineOffset =\n      codeLines.findIndex(line => {\n        if (line.includes(`// @filename: `)) {\n          const fileName = line.split(\"// @filename: \")[1].trim()\n          return err.file!.fileName.endsWith(fileName)\n        }\n        return false\n      }) + 1\n    const fileContentStartIndexInModifiedFile = code.indexOf(codeWhereErrorLives)\n    const renderedMessage = ts.flattenDiagnosticMessageText(err.messageText, \"\\n\")\n    const id = `err-${err.code}-${err.start}-${err.length}`\n    const { line, character } = ts.getLineAndCharacterOfPosition(err.file!, err.start!)\n\n    errors.push({\n      category: err.category,\n      code: err.code,\n      length: err.length,\n      start: err.start ? err.start + fileContentStartIndexInModifiedFile : undefined,\n      line: line + lineOffset,\n      character,\n      renderedMessage,\n      id,\n    })\n  }\n\n  // Handle emitting files\n  if (handbookOptions.showEmit) {\n    // Get the file which created the file we want to show:\n    const emitFilename = handbookOptions.showEmittedFile || defaultFileName\n    const emitSourceFilename =\n      fsRoot + emitFilename.replace(\".jsx\", \"\").replace(\".js\", \"\").replace(/\\.d\\.([^\\.]+\\.)?[cm]?ts$/i, \"\").replace(\".map\", \"\")\n\n    let emitSource = filenames.find(f => f === emitSourceFilename + \".ts\" || f === emitSourceFilename + \".tsx\")\n\n    if (!emitSource && !compilerOptions.outFile) {\n      const allFiles = filenames.join(\", \")\n      // prettier-ignore\n      throw new TwoslashError(\n        `Could not find source file to show the emit for`,\n        `Cannot find the corresponding **source** file  ${emitFilename} for completions via ^| returned no quickinfo from the compiler.`,\n        `Looked for: ${emitSourceFilename} in the vfs - which contains: ${allFiles}`\n      )\n    }\n\n    // Allow outfile, in which case you need any file.\n    if (compilerOptions.outFile) {\n      emitSource = filenames[0]\n    }\n\n    const output = ls.getEmitOutput(emitSource!)\n    const file = output.outputFiles.find(\n      o => o.name === fsRoot + handbookOptions.showEmittedFile || o.name === handbookOptions.showEmittedFile\n    )\n\n    if (!file) {\n      const allFiles = output.outputFiles.map(o => o.name).join(\", \")\n      throw new TwoslashError(\n        `Cannot find the output file in the Twoslash VFS`,\n        `Looking for ${handbookOptions.showEmittedFile} in the Twoslash vfs after compiling`,\n        `Looked for\" ${fsRoot + handbookOptions.showEmittedFile} in the vfs - which contains ${allFiles}.`\n      )\n    }\n\n    code = file.text\n    extension = file.name.split(\".\").pop()!\n\n    // Remove highlights and queries, because it won't work across transpiles,\n    // though I guess source-mapping could handle the transition\n    highlights = []\n    partialQueries = []\n    staticQuickInfos = []\n  }\n\n  const zippedCode = lzstring.compressToEncodedURIComponent(originalCode)\n  const playgroundURL = `https://www.typescriptlang.org/play/#code/${zippedCode}`\n\n  // Cutting happens last, and it means editing the lines and character index of all\n  // the type annotations which are attached to a location\n\n  const cutString = \"// ---cut---\\n\"\n  if (code.includes(cutString)) {\n    // Get the place it is, then find the end and the start of the next line\n    const cutIndex = code.indexOf(cutString) + cutString.length\n    const lineOffset = code.substr(0, cutIndex).split(\"\\n\").length - 1\n\n    // Kills the code shown\n    code = code.split(cutString).pop()!\n\n    // For any type of metadata shipped, it will need to be shifted to\n    // fit in with the new positions after the cut\n    staticQuickInfos.forEach(info => {\n      info.start -= cutIndex\n      info.line -= lineOffset\n    })\n    staticQuickInfos = staticQuickInfos.filter(s => s.start > -1)\n\n    errors.forEach(err => {\n      if (err.start) err.start -= cutIndex\n      if (err.line) err.line -= lineOffset\n    })\n    errors = errors.filter(e => e.start && e.start > -1)\n\n    highlights.forEach(highlight => {\n      highlight.start -= cutIndex\n      highlight.line -= lineOffset\n    })\n\n    highlights = highlights.filter(e => e.start > -1)\n\n    queries.forEach(q => (q.line -= lineOffset))\n    queries = queries.filter(q => q.line > -1)\n\n    tags.forEach(q => (q.line -= lineOffset))\n    tags = tags.filter(q => q.line > -1)\n  }\n\n  const cutAfterString = \"// ---cut-after---\\n\"\n\n  if (code.includes(cutAfterString)) {\n\n    // Get the place it is, then find the end and the start of the next line\n    const cutIndex = code.indexOf(cutAfterString) + cutAfterString.length\n    const lineOffset = code.substr(0, cutIndex).split(\"\\n\").length - 1\n\n    // Kills the code shown, removing any whitespace on the end\n    code = code.split(cutAfterString).shift()!.trimEnd()\n\n    // Cut any metadata after the cutAfterString\n    staticQuickInfos = staticQuickInfos.filter(s => s.line < lineOffset)\n    errors = errors.filter(e => e.line && e.line < lineOffset)\n    highlights = highlights.filter(e => e.line < lineOffset)\n    queries = queries.filter(q => q.line < lineOffset)\n    tags = tags.filter(q => q.line < lineOffset)\n  }\n\n  return {\n    code,\n    extension,\n    highlights,\n    queries,\n    staticQuickInfos,\n    errors,\n    playgroundURL,\n    tags,\n  }\n}\n\nconst splitTwoslashCodeInfoFiles = (code: string, defaultFileName: string, root: string) => {\n  const lines = code.split(/\\r\\n?|\\n/g)\n\n  let nameForFile = code.includes(`@filename: ${defaultFileName}`) ? \"global.ts\" : defaultFileName\n  let currentFileContent: string[] = []\n  const fileMap: Array<[string, string[]]> = []\n\n  for (const line of lines) {\n    if (line.includes(\"// @filename: \")) {\n      fileMap.push([root + nameForFile, currentFileContent])\n      nameForFile = line.split(\"// @filename: \")[1].trim()\n      currentFileContent = []\n    } else {\n      currentFileContent.push(line)\n    }\n  }\n  fileMap.push([root + nameForFile, currentFileContent])\n\n  // Basically, strip these:\n  // [\"index.ts\", []]\n  // [\"index.ts\", [\"\"]]\n  const nameContent = fileMap.filter(n => n[1].length > 0 && (n[1].length > 1 || n[1][0] !== \"\"))\n  return nameContent\n}\n"],"names":["parsePrimitive","value","type","toLowerCase","length","TwoslashError","cleanMarkdownEscaped","code","replace","typesToExtension","types","map","js","javascript","ts","typescript","tsx","jsx","json","jsn","Object","keys","getIdentifierTextSpans","sourceFile","textSpans","checkChildren","node","forEachChild","child","isIdentifier","start","getStart","push","span","createTextSpan","end","text","getText","getClosestWord","str","pos","String","Number","left","slice","search","right","word","startPos","validateCodeForErrors","relevantErrors","handbookOptions","extension","originalCode","vfsRoot","inErrsButNotFoundInTheHeader","filter","e","errors","includes","errorsFound","Array","from","Set","join","errorsToShow","codeToAdd","missing","filesToErrors","noFiles","forEach","d","_d$file","fileRef","file","fileName","existing","showDiagnostics","title","diags","msg","messageText","innerDiags","filepath","allMessages","newErr","validateInput","hasLocalStorage","localStorage","error","hasProcess","process","shouldDebug","getItem","env","DEBUG","log","console","_message","_Error","description","recommendation","_this","message","call","_inheritsLoose","_wrapNativeSuper","Error","filterHighlightLines","codeLines","highlights","queries","nextContentOffset","contentOffset","removedLines","_loop","_i","line","moveForward","stripLine","logDesc","splice","highlightMatch","exec","queryMatch","removePrettierIgnoreMatch","completionsQuery","indexOf","kind","offset","undefined","docs","lastIndexOf","trim","i","getOptionValueFromMap","name","key","optMap","result","get","setOption","opts","_loop2","opt","_step","elementType","element","strings","split","v","_ret","_iterator","_createForOfIteratorHelperLoose","optionDeclarations","done","booleanConfigRegexp","valuedConfigRegexp","filterCompilerOptions","defaultCompilerOptions","options","_extends","match","filterCustomTags","customTags","tags","annotation","defaultHandbookOptions","noErrors","showEmit","showEmittedFile","noStaticSemanticInfo","emit","noErrorValidation","filterHandbookOptions","twoslasher","_options$tsModule","_options$lzstringModu","_options$defaultCompi","tsModule","require","lzstring","lzstringModule","safeExtension","defaultFileName","strict","target","ScriptTarget","ES2016","allowJs","defaultOptions","compilerOptions","JsxEmit","Preserve","getRoot","pa","path","rootPath","cwd","sep","posix","useFS","fsMap","vfs","Map","system","createSystem","createFSBackedSystem","tsLibDirectory","fsRoot","createVirtualTypeScriptEnvironment","customTransformers","ls","languageService","partialQueries","nameContent","splitTwoslashCodeInfoFiles","sourceFiles","filenames","nc","_loop3","_step2","filename","filetype","pop","allowJSON","resolveJsonModule","newFileCode","createFile","updates","concat","lspedQueries","q","getSourceFile","position","getPositionOfLineAndCharacter","quickInfo","getQuickInfoAtPosition","displayParts","dp","documentation","queryResult","completions","getCompletionsAtPosition","prefix","lastDot","entries","completionPrefix","newEditedFileCode","updateFile","_iterator2","allCodeLines","f","output","getEmitOutput","outputFiles","writeFile","errs","staticQuickInfos","getSemanticDiagnostics","getSyntacticDiagnostics","source","sys","readFile","fileContentStartIndexInModifiedFile","linesAbove","identifiers","_iterator3","_step3","identifier","targetString","burnerSourceFile","createSourceFile","ES2015","_ts$getLineAndCharact","getLineAndCharacterOfPosition","character","completionsPrefix","_loop4","err","_step4","codeWhereErrorLives","lineOffset","findIndex","endsWith","renderedMessage","flattenDiagnosticMessageText","id","_ts$getLineAndCharact2","category","_iterator4","emitFilename","emitSourceFilename","emitSource","find","outFile","allFiles","o","zippedCode","compressToEncodedURIComponent","playgroundURL","cutString","cutIndex","substr","info","s","highlight","cutAfterString","shift","trimEnd","root","lines","nameForFile","currentFileContent","fileMap","_iterator5","_step5","n"],"mappings":"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"}