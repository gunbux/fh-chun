// node/utils.ts
import { join } from "node:path";
import { createRequire } from "node:module";
import { fileURLToPath } from "node:url";
import { ensurePrefix, slash } from "@antfu/utils";
import isInstalledGlobally from "is-installed-globally";
import { resolvePath } from "mlly";
import globalDirs from "global-directory";
var require2 = createRequire(import.meta.url);
function toAtFS(path) {
  return `/@fs${ensurePrefix("/", slash(path))}`;
}
async function resolveImportPath(importName, ensure = false) {
  try {
    return await resolvePath(importName, {
      url: fileURLToPath(import.meta.url)
    });
  } catch {
  }
  if (isInstalledGlobally) {
    try {
      return require2.resolve(join(globalDirs.yarn.packages, importName));
    } catch {
    }
    try {
      return require2.resolve(join(globalDirs.npm.packages, importName));
    } catch {
    }
  }
  if (ensure)
    throw new Error(`Failed to resolve package "${importName}"`);
  return void 0;
}
async function resolveGlobalImportPath(importName) {
  try {
    return await resolvePath(importName, {
      url: fileURLToPath(import.meta.url)
    });
  } catch {
  }
  try {
    return require2.resolve(join(globalDirs.yarn.packages, importName));
  } catch {
  }
  try {
    return require2.resolve(join(globalDirs.npm.packages, importName));
  } catch {
  }
  throw new Error(`Failed to resolve global package "${importName}"`);
}
function stringifyMarkdownTokens(tokens) {
  return tokens.map((token) => token.children?.filter((t) => ["text", "code_inline"].includes(t.type) && !t.content.match(/^\s*$/)).map((t) => t.content.trim()).join(" ")).filter(Boolean).join(" ");
}
function generateGoogleFontsUrl(options) {
  const weights = options.weights.flatMap((i) => options.italic ? [`0,${i}`, `1,${i}`] : [`${i}`]).sort().join(";");
  const fonts = options.webfonts.map((i) => `family=${i.replace(/^(['"])(.*)\1$/, "$1").replace(/\s+/g, "+")}:${options.italic ? "ital," : ""}wght@${weights}`).join("&");
  return `https://fonts.googleapis.com/css2?${fonts}&display=swap`;
}
async function packageExists(name) {
  if (await resolveImportPath(`${name}/package.json`).catch(() => false))
    return true;
  return false;
}

export {
  toAtFS,
  resolveImportPath,
  resolveGlobalImportPath,
  stringifyMarkdownTokens,
  generateGoogleFontsUrl,
  packageExists
};
