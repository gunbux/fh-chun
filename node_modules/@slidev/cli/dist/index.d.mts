import Vue from '@vitejs/plugin-vue';
import VueJsx from '@vitejs/plugin-vue-jsx';
import Icons from 'unplugin-icons/vite';
import Components from 'unplugin-vue-components/vite';
import Markdown from 'unplugin-vue-markdown/vite';
import { VitePluginConfig } from 'unocss/vite';
import RemoteAssets from 'vite-plugin-remote-assets';
import ServerRef from 'vite-plugin-vue-server-ref';
import { ArgumentsType } from '@antfu/utils';
import { SlidevMarkdown } from '@slidev/types';
import * as vite from 'vite';
import { InlineConfig, Plugin } from 'vite';
import * as fs from '@slidev/parser/fs';
export { fs as parser };

interface SlidevEntryOptions {
    /**
     * Markdown entry
     *
     * @default 'slides.md'
     */
    entry?: string;
    /**
     * Theme id
     */
    theme?: string;
    /**
     * Remote password
     */
    remote?: string;
    /**
     * Root path
     *
     * @default process.cwd()
     */
    userRoot?: string;
    /**
     * Enable inspect plugin
     */
    inspect?: boolean;
}
interface ResolvedSlidevOptions {
    data: SlidevMarkdown;
    entry: string;
    userRoot: string;
    cliRoot: string;
    clientRoot: string;
    theme: string;
    themeRoots: string[];
    addonRoots: string[];
    roots: string[];
    mode: 'dev' | 'build' | 'export';
    remote?: string;
    inspect?: boolean;
}
interface SlidevPluginOptions extends SlidevEntryOptions {
    vue?: ArgumentsType<typeof Vue>[0];
    vuejsx?: ArgumentsType<typeof VueJsx>[0];
    markdown?: ArgumentsType<typeof Markdown>[0];
    components?: ArgumentsType<typeof Components>[0];
    icons?: ArgumentsType<typeof Icons>[0];
    remoteAssets?: ArgumentsType<typeof RemoteAssets>[0];
    serverRef?: ArgumentsType<typeof ServerRef>[0];
    unocss?: VitePluginConfig;
}
interface SlidevServerOptions {
    onDataReload?: (newData: SlidevMarkdown, data: SlidevMarkdown) => void;
}
declare function getClientRoot(): Promise<string>;
declare function getCLIRoot(): string;
declare function isPath(name: string): boolean;
declare function getThemeRoots(name: string, entry: string): Promise<string[]>;
declare function getAddonRoots(addons: string[], entry: string): Promise<string[]>;
declare function getRoot(name: string, entry: string): Promise<string>;
declare function getUserRoot(options: SlidevEntryOptions): {
    entry: string;
    userRoot: string;
};
declare function resolveOptions(options: SlidevEntryOptions, mode: ResolvedSlidevOptions['mode'], promptForInstallation?: boolean): Promise<ResolvedSlidevOptions>;

declare module 'vite' {
    interface UserConfig {
        /**
         * Custom internal plugin options for Slidev (advanced)
         *
         * @see https://github.com/slidevjs/slidev/blob/main/packages/slidev/node/options.ts#L50
         */
        slidev?: SlidevPluginOptions;
    }
}

declare function createServer(options: ResolvedSlidevOptions, viteConfig?: InlineConfig, serverOptions?: SlidevServerOptions): Promise<vite.ViteDevServer>;

declare function ViteSlidevPlugin(options: ResolvedSlidevOptions, pluginOptions: SlidevPluginOptions, serverOptions?: SlidevServerOptions): Promise<Plugin[]>;

export { type ResolvedSlidevOptions, type SlidevEntryOptions, type SlidevPluginOptions, type SlidevServerOptions, ViteSlidevPlugin, createServer, getAddonRoots, getCLIRoot, getClientRoot, getRoot, getThemeRoots, getUserRoot, isPath, resolveOptions };
